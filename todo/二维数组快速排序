func merge(intervals [][]int) [][]int {
    // interval sort by [i][0]
    a := quickSort(intervals, 0, len(intervals)-1)
    fmt.Println(a)
    //for each
    var res [][]int
    for i:=0; i<len(a); i++{
        if i+1 < len(a) && a[i][1] >= a[i+1][0] {
            a[i+1] = mergeInter(a[i],a[i+1])
        } else {
            res = append(res, a[i])
        }
    }

    return res
}

func quickSort(a [][]int, left,right int) [][]int {
    if left >= right {
        return a
    }

    divide := partition(a, left, right)
    a = quickSort(a,left,divide-1) 
    a = quickSort(a,divide+1,right)
    return a
}

func partition(a [][]int, left,right int) int {
    pivotele := a[left]
    pivot := a[left][0]
    i,j := left, right
    for i,j= 0,len(a)-1; i < j; {

        for i < j && a[j][0] >= pivot {
            j--
        }
        if i < j {
            a[i] = a[j]
            i++ 
        }
        for i < j && a[i][0] <= pivot {
            i++
        }
        if i < j {
            a[j] = a[i]
            j--
        }
    }
    a[i] = pivotele
    return i
}

func mergeInter(a []int ,b []int) []int {
    if a[1] < b[1] {
        return []int{a[0], b[1]}
    } else {
        return a
    }
}